cmake_minimum_required(VERSION 3.16)

project(learn_c++)

set(CMAKE_MODULE_PATH "${CMAKE_BINARY_DIR}${CMAKE_MODULE_PATH}")

set(PROJECT_NAME "learn_c++")

add_executable(${PROJECT_NAME} src/chapter_5/convert_time_to_second.cpp)
add_executable(time_to_second_converter src/chapter_5/convert_time_to_second.cpp)
add_executable(celiac_converter src/chapter_5/celsia_converter.cpp src/chapter_5/celsia_converter.cpp)
add_executable(second_to_time_converter src/chapter_5/second_to_time_converter.cpp)
add_executable(small_job src/chapter_6/small_job.cpp)
add_executable(distance_class src/chapter_6/distance.cpp)
add_executable(costume_int src/chapter_6/int_type.cpp)
add_executable(toll_booth src/chapter_6/toll_booth.cpp)
add_executable(time_adding src/chapter_6/time.cpp)
add_executable(employee src/chapter_6/employ.cpp)
add_executable(date src/chapter_6/Date.cpp)
add_executable(super_employee src/chapter_6/super_employee.cpp)
add_executable(angle src/chapter_6/angle.cpp)
add_executable(object_counter src/chapter_6/object_counter.cpp)
add_executable(fraction src/chapter_6/Fraction.cpp)
add_executable(ship src/chapter_6/ship.cpp)
add_executable(stack src/chapter_7/stack.cpp)
add_executable(deck src/chapter_7/card_game.cpp)
add_executable(print_string src/chapter_7/string_file.cpp)
add_executable(copy_string src/chapter_7/copy_string.cpp)
add_executable(about_info src/chapter_7/string_class.cpp)
add_executable(revers src/chapter_7/reversit.cpp)
add_executable(employee_with_name src/chapter_7/employee_with_name.cpp)
add_executable(array_max src/chapter_7/max_number.cpp)
add_executable(money src/chapter_7/money.cpp)
add_executable(safe_array src/chapter_7/safeArray.cpp)
add_executable(transfer_object src/chapter_7/test_transfer_object.cpp)

find_package(fmt REQUIRED)
if (fmt_FOUND)
    target_include_directories(${PROJECT_NAME} PRIVATE ${fmt_INCLUDE_DIRS})
    target_link_libraries(${PROJECT_NAME} PRIVATE ${fmt_LIBRARIES})
endif()			

find_package(CURL REQUIRED)
if (CURL_FOUND)
    target_include_directories(${PROJECT_NAME} PRIVATE ${CURL_INCLUDE_DIRS})
    target_link_libraries(${PROJECT_NAME} PRIVATE ${CURL_LIBRARIES})
endif()

find_package(GTest REQUIRED)
if (GTest_FOUND)
    target_include_directories(${PROJECT_NAME} PRIVATE ${GTest_INCLUDE_DIRS})
    target_link_libraries(${PROJECT_NAME} PRIVATE ${GTest_LIBRARIES})
endif()
